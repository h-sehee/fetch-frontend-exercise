{"version":3,"file":"static/js/864.50e2c9d6.chunk.js","mappings":"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","sources":["components/FilterPopover.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\nimport {\n  Button,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverArrow,\n  PopoverCloseButton,\n  PopoverHeader,\n  PopoverBody,\n  Input,\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  AccordionIcon,\n  Checkbox,\n  CheckboxGroup,\n  VStack,\n  Box,\n  Text,\n  Divider,\n  RangeSlider,\n  RangeSliderTrack,\n  RangeSliderFilledTrack,\n  RangeSliderThumb,\n  Icon,\n  Tag,\n  Wrap,\n  TagLabel,\n  TagCloseButton,\n} from \"@chakra-ui/react\";\nimport { IoFilter } from \"react-icons/io5\";\nimport { ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { US_STATES } from \"../constants/usStates\";\n\n/**\n * Props for the FilterPopover component.\n * Controls all filter options for the dog search (breed, age, location, distance).\n */\ninterface FilterPopoverProps {\n  allBreeds: string[];\n  selectedBreeds: string[];\n  onChangeBreeds: (breeds: string[]) => void;\n\n  minAge: number;\n  maxAge: number;\n  ageRange: [number, number];\n  onChangeAgeRange: (range: [number, number]) => void;\n\n  userZip: string;\n  onChangeUserZip: (zip: string) => void;\n  radiusMeters: number;\n  onChangeRadius: (meters: number) => void;\n  selectedStates: string[];\n  onChangeStates: (states: string[]) => void;\n}\n\n/**\n * FilterPopover component provides UI for selecting and managing search filters.\n * Includes breed, age, state, zip code, and distance filters.\n */\nconst FilterPopover: React.FC<FilterPopoverProps> = ({\n  allBreeds,\n  selectedBreeds,\n  onChangeBreeds,\n  minAge,\n  maxAge,\n  ageRange,\n  onChangeAgeRange,\n  userZip,\n  onChangeUserZip,\n  radiusMeters,\n  onChangeRadius,\n  selectedStates,\n  onChangeStates,\n}) => {\n  // Local state for breed search input\n  const [breedSearch, setBreedSearch] = useState<string>(\"\");\n\n  // Local state for temporary age range slider\n  const [tempAgeRange, setTempAgeRange] = useState<[number, number]>(ageRange);\n\n  // Local state for temporary zip code input\n  const [tempZip, setTempZip] = useState<string>(userZip);\n\n  // Local state for state search input\n  const [stateSearch, setStateSearch] = useState(\"\");\n\n  // Filter US states based on search input and already selected states\n  const filteredStates = useMemo(() => {\n    return US_STATES.filter(\n      ({ code, name }) =>\n        !selectedStates.includes(code) &&\n        (code.toLowerCase().includes(stateSearch.toLowerCase()) ||\n          name.toLowerCase().includes(stateSearch.toLowerCase()))\n    );\n  }, [stateSearch, selectedStates]);\n\n  // Sync tempAgeRange with external ageRange prop\n  useEffect(() => {\n    setTempAgeRange(ageRange);\n  }, [ageRange]);\n\n  // Clamp tempAgeRange if min/max age changes\n  useEffect(() => {\n    setTempAgeRange(([prevMin, prevMax]) => {\n      const newMin = prevMin < minAge ? minAge : prevMin;\n      const newMax = prevMax > maxAge ? maxAge : prevMax;\n      return [newMin, newMax];\n    });\n  }, [minAge, maxAge]);\n\n  // Sync tempZip with external userZip/radiusMeters\n  useEffect(() => {\n    setTempZip(userZip);\n  }, [userZip, radiusMeters]);\n\n  // Filter breeds based on search input\n  const filteredBreeds = useMemo(() => {\n    return allBreeds.filter((b) =>\n      b.toLowerCase().includes(breedSearch.toLowerCase())\n    );\n  }, [breedSearch, allBreeds]);\n\n  // Handler for breed selection changes\n  const handleBreedsChange = (vals: string[]) => {\n    onChangeBreeds(vals);\n  };\n\n  // Handler for age range slider change end\n  const handleAgeChangeEnd = (valArr: number[]) => {\n    const newRange: [number, number] = [valArr[0], valArr[1]];\n    onChangeAgeRange(newRange);\n  };\n\n  // Handler for zip code input blur\n  const handleZipBlur = () => {\n    onChangeUserZip(tempZip.trim());\n  };\n\n  return (\n    <Popover placement=\"bottom-start\" closeOnBlur>\n      <PopoverTrigger>\n        <Button\n          colorScheme=\"brand\"\n          leftIcon={\n            <Icon\n              as={IoFilter as React.ElementType}\n              color=\"white\"\n              boxSize={5}\n            />\n          }\n          rightIcon={<ChevronDownIcon boxSize={5} />}\n        >\n          Filters\n        </Button>\n      </PopoverTrigger>\n\n      <PopoverContent width=\"320px\">\n        <PopoverArrow />\n\n        <PopoverHeader>\n          <Box\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Text fontWeight=\"bold\" fontSize=\"lg\">\n              Filters\n            </Text>\n            <PopoverCloseButton position=\"static\" />\n          </Box>\n        </PopoverHeader>\n\n        <Divider />\n\n        <PopoverBody maxH=\"480px\" overflowY=\"auto\" pb=\"2\">\n          <Accordion allowToggle>\n            {/* Breed filter section */}\n            <AccordionItem>\n              <h2>\n                <AccordionButton>\n                  <Box flex=\"1\" textAlign=\"left\" fontWeight=\"semibold\">\n                    Breeds\n                  </Box>\n                  <AccordionIcon />\n                </AccordionButton>\n              </h2>\n              <AccordionPanel pb={4}>\n                <Input\n                  placeholder=\"Search breeds...\"\n                  size=\"sm\"\n                  mb=\"2\"\n                  value={breedSearch}\n                  onChange={(e) => setBreedSearch(e.target.value)}\n                />\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  mb=\"2\"\n                  onClick={() => onChangeBreeds([])}\n                >\n                  All Breeds\n                </Button>\n\n                <CheckboxGroup\n                  colorScheme=\"brand\"\n                  value={selectedBreeds}\n                  onChange={(vals) => handleBreedsChange(vals as string[])}\n                >\n                  <VStack align=\"start\" spacing=\"1\">\n                    {filteredBreeds.length > 0 ? (\n                      filteredBreeds.map((breed) => (\n                        <Checkbox key={breed} value={breed}>\n                          {breed}\n                        </Checkbox>\n                      ))\n                    ) : (\n                      <Text color=\"gray.500\" fontSize=\"sm\">\n                        No breeds found.\n                      </Text>\n                    )}\n                  </VStack>\n                </CheckboxGroup>\n              </AccordionPanel>\n            </AccordionItem>\n\n            {/* Age filter section */}\n            <AccordionItem>\n              <h2>\n                <AccordionButton>\n                  <Box flex=\"1\" textAlign=\"left\" fontWeight=\"semibold\">\n                    Age\n                  </Box>\n                  <AccordionIcon />\n                </AccordionButton>\n              </h2>\n              <AccordionPanel pb={4}>\n                <Text fontSize=\"sm\" mb=\"1\">\n                  {tempAgeRange[0]} – {tempAgeRange[1]} years\n                </Text>\n                <RangeSlider\n                  min={minAge}\n                  max={maxAge}\n                  step={1}\n                  value={tempAgeRange}\n                  onChange={(val) => setTempAgeRange([val[0], val[1]])}\n                  onChangeEnd={(val) => handleAgeChangeEnd(val)}\n                >\n                  <RangeSliderTrack>\n                    <RangeSliderFilledTrack bg=\"brand.400\" />\n                  </RangeSliderTrack>\n                  <RangeSliderThumb index={0} boxSize={4} bg=\"brand.500\" />\n                  <RangeSliderThumb index={1} boxSize={4} bg=\"brand.500\" />\n                </RangeSlider>\n              </AccordionPanel>\n            </AccordionItem>\n\n            {/* State filter section */}\n            <AccordionItem>\n              <h2>\n                <AccordionButton>\n                  <Box flex=\"1\" textAlign=\"left\" fontWeight=\"semibold\">\n                    Location\n                  </Box>\n                  <AccordionIcon />\n                </AccordionButton>\n              </h2>\n              <AccordionPanel pb={4}>\n                <Input\n                  placeholder=\"Search state (e.g. CA)\"\n                  size=\"sm\"\n                  mb=\"2\"\n                  value={stateSearch}\n                  onChange={(e) => setStateSearch(e.target.value)}\n                />\n\n                {stateSearch.trim() !== \"\" && (\n                  <Wrap spacing={2} mb={2}>\n                    {filteredStates.length > 0 ? (\n                      filteredStates.map(({ code, name }) => (\n                        <Tag\n                          key={code}\n                          size=\"sm\"\n                          variant=\"subtle\"\n                          colorScheme=\"gray\"\n                          cursor=\"pointer\"\n                          onClick={() => {\n                            onChangeStates([...selectedStates, code]);\n                            setStateSearch(\"\");\n                          }}\n                        >\n                          {name} ({code})\n                        </Tag>\n                      ))\n                    ) : (\n                      <Text fontSize=\"sm\" color=\"gray.500\" px={2}>\n                        No matches found\n                      </Text>\n                    )}\n                  </Wrap>\n                )}\n\n                <Wrap spacing={2}>\n                  {selectedStates.map((abbr) => (\n                    <Tag\n                      key={abbr}\n                      size=\"md\"\n                      borderRadius=\"full\"\n                      variant=\"solid\"\n                      colorScheme=\"brand\"\n                    >\n                      <TagLabel>{abbr}</TagLabel>\n                      <TagCloseButton\n                        onClick={() => {\n                          onChangeStates(\n                            selectedStates.filter((s) => s !== abbr)\n                          );\n                        }}\n                      />\n                    </Tag>\n                  ))}\n                </Wrap>\n              </AccordionPanel>\n            </AccordionItem>\n            {/* Distance filter section */}\n            <AccordionItem>\n              <h2>\n                <AccordionButton>\n                  <Box flex=\"1\" textAlign=\"left\" fontWeight=\"semibold\">\n                    Distance\n                  </Box>\n                  <AccordionIcon />\n                </AccordionButton>\n              </h2>\n              <AccordionPanel pb={4}>\n                <Text fontSize=\"sm\" mb=\"1\">\n                  Zip Code\n                </Text>\n                <Input\n                  placeholder=\"e.g. 53703\"\n                  size=\"sm\"\n                  mb=\"3\"\n                  value={tempZip}\n                  onChange={(e) => setTempZip(e.target.value)}\n                  onBlur={handleZipBlur}\n                />\n\n                <Text fontSize=\"sm\" mb=\"2\">\n                  Radius\n                </Text>\n                <Wrap spacing={3}>\n                  {[5, 50, 100, 500, 1000].map((km) => {\n                    const meters = km * 1000;\n                    const isActive = radiusMeters === meters;\n\n                    return (\n                      <Tag\n                        key={km}\n                        size=\"md\"\n                        variant={isActive ? \"solid\" : \"subtle\"}\n                        colorScheme={isActive ? \"brand\" : \"gray\"}\n                        cursor=\"pointer\"\n                        onClick={() => {\n                          onChangeRadius(meters);\n                        }}\n                      >\n                        {km} km\n                      </Tag>\n                    );\n                  })}\n                </Wrap>\n              </AccordionPanel>\n            </AccordionItem>\n          </Accordion>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default FilterPopover;\n"],"names":["_ref","allBreeds","selectedBreeds","onChangeBreeds","minAge","maxAge","ageRange","onChangeAgeRange","userZip","onChangeUserZip","radiusMeters","onChangeRadius","selectedStates","onChangeStates","breedSearch","setBreedSearch","useState","tempAgeRange","setTempAgeRange","tempZip","setTempZip","stateSearch","setStateSearch","filteredStates","useMemo","US_STATES","filter","_ref2","code","name","includes","toLowerCase","useEffect","_ref3","prevMin","prevMax","filteredBreeds","b","_jsxs","Popover","placement","closeOnBlur","children","_jsx","PopoverTrigger","Button","colorScheme","leftIcon","Icon","as","IoFilter","color","boxSize","rightIcon","ChevronDownIcon","PopoverContent","width","PopoverArrow","PopoverHeader","Box","display","alignItems","justifyContent","Text","fontWeight","fontSize","PopoverCloseButton","position","Divider","PopoverBody","maxH","overflowY","pb","Accordion","allowToggle","AccordionItem","AccordionButton","flex","textAlign","AccordionIcon","AccordionPanel","Input","placeholder","size","mb","value","onChange","e","target","variant","onClick","CheckboxGroup","vals","handleBreedsChange","VStack","align","spacing","length","map","breed","Checkbox","RangeSlider","min","max","step","val","onChangeEnd","valArr","newRange","handleAgeChangeEnd","RangeSliderTrack","RangeSliderFilledTrack","bg","RangeSliderThumb","index","trim","Wrap","_ref4","Tag","cursor","px","abbr","borderRadius","TagLabel","TagCloseButton","s","onBlur","handleZipBlur","km","meters","isActive"],"sourceRoot":""}