{"version":3,"file":"static/js/126.b8d9a6d1.chunk.js","mappings":"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","sources":["hooks/useDogLocation.ts","components/MatchResultModal.tsx"],"sourcesContent":["import { useEffect, useState, useMemo } from \"react\";\nimport { fetchLocationsByZip, Location } from \"../api\";\n\nexport function useDogLocations(zipCodes: string[]) {\n  const [locationsMap, setLocationsMap] = useState<Record<string, Location>>(\n    {}\n  );\n  const [loading, setLoading] = useState(false);\n\n  const zipKey = useMemo(() => zipCodes.filter(Boolean).join(\",\"), [zipCodes]);\n\n  useEffect(() => {\n    const codes = zipKey ? zipKey.split(\",\") : [];\n    if (codes.length === 0) {\n      setLocationsMap({});\n      return;\n    }\n    let canceled = false;\n\n    (async () => {\n      setLoading(true);\n      try {\n        const list = await fetchLocationsByZip(codes);\n        if (canceled) return;\n        const map: Record<string, Location> = {};\n        list.forEach((loc) => {\n          if (loc) map[loc.zip_code] = loc;\n        });\n        setLocationsMap((prev) => {\n          const prevKeys = Object.keys(prev);\n          const newKeys = Object.keys(map);\n          if (\n            prevKeys.length === newKeys.length &&\n            newKeys.every((k) => prev[k]?.zip_code === map[k]?.zip_code)\n          ) {\n            return prev;\n          }\n          return map;\n        });\n      } catch {\n        if (!canceled) setLocationsMap({});\n      } finally {\n        if (!canceled) setLoading(false);\n      }\n    })();\n\n    return () => {\n      canceled = true;\n    };\n  }, [zipKey]);\n\n  return { locationsMap, loading };\n}\n\nexport function useDogLocation(zipCode?: string) {\n  const zipArray = zipCode ? [zipCode] : [];\n  const { locationsMap, loading } = useDogLocations(zipArray);\n  return {\n    location: zipCode ? locationsMap[zipCode] : undefined,\n    loading,\n  };\n}\n","import React from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalCloseButton,\n  Image,\n  Text,\n  VStack,\n  Box,\n  Flex,\n  Heading,\n  StackDivider,\n  Icon,\n  useBreakpointValue,\n} from \"@chakra-ui/react\";\nimport { Dog } from \"../api\";\nimport { MdLocationOn, MdCake, MdPets } from \"react-icons/md\";\nimport { useDogLocation } from \"../hooks/useDogLocation\";\n\ninterface MatchResultModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  matchDog: Dog | null;\n}\n\nconst MatchResultModal: React.FC<MatchResultModalProps> = ({\n  isOpen,\n  onClose,\n  matchDog,\n}) => {\n  const modalSize = useBreakpointValue({ base: \"sm\", md: \"2xl\", xl: \"6xl\" });\n\n  const zip = matchDog?.zip_code ? matchDog.zip_code : \"\";\n  const { location: dogLocation, loading } = useDogLocation(zip);\n\n  if (!matchDog) {\n    return null;\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered size={modalSize}>\n      <ModalOverlay bg=\"blackAlpha.600\" backdropFilter=\"blur(8px)\" />\n      <ModalContent\n        borderRadius=\"2xl\"\n        overflow=\"hidden\"\n        position=\"relative\"\n        maxW={{ base: \"90vw\", md: \"2xl\", xl: \"6xl\" }}\n      >\n        <ModalCloseButton size=\"lg\" top={4} right={4} color=\"gray.500\" />\n        <Flex direction={{ base: \"column\", md: \"row\" }} height=\"100%\">\n          <Box flex=\"1\" height={{ base: \"200px\", md: \"auto\" }}>\n            <Image\n              src={matchDog.img}\n              alt={matchDog.name}\n              objectFit=\"cover\"\n              width=\"100%\"\n              height=\"100%\"\n              maxH={{ base: \"40vh\", md: \"90vh\" }}\n            />\n          </Box>\n\n          <Flex direction=\"column\" justify=\"center\" p={{ base: 6, md: 10 }}>\n            <Heading\n              as=\"h2\"\n              mb={4}\n              color=\"accent.500\"\n              fontSize={{ base: \"2xl\", md: \"3xl\" }}\n              bgGradient=\"linear(to-r, purple.500, pink.300)\"\n              bgClip=\"text\"\n              letterSpacing=\"wide\"\n              textAlign=\"center\"\n            >\n              ðŸŽ‰ {matchDog.name} ðŸŽ‰\n            </Heading>\n\n            <VStack\n              spacing={4}\n              align=\"stretch\"\n              divider={<StackDivider borderColor=\"gray.200\" />}\n              mt={6}\n            >\n              <Flex align=\"center\">\n                <Icon\n                  as={MdPets as React.ElementType}\n                  boxSize={6}\n                  color=\"brand.400\"\n                  mr={3}\n                />\n                <Box>\n                  <Text\n                    fontSize=\"xs\"\n                    color=\"accent.500\"\n                    textTransform=\"uppercase\"\n                  >\n                    Breed\n                  </Text>\n                  <Text fontSize=\"sm\">{matchDog.breed}</Text>\n                </Box>\n              </Flex>\n              <Flex align=\"center\">\n                <Icon\n                  as={MdCake as React.ElementType}\n                  boxSize={6}\n                  color=\"brand.400\"\n                  mr={3}\n                />\n                <Box>\n                  <Text\n                    fontSize=\"xs\"\n                    color=\"accent.500\"\n                    textTransform=\"uppercase\"\n                  >\n                    Age\n                  </Text>\n                  <Text fontSize=\"sm\">\n                    {matchDog.age} year{matchDog.age > 1 && \"s\"}\n                  </Text>\n                </Box>\n              </Flex>\n\n              <Flex align=\"center\">\n                <Icon\n                  as={MdLocationOn as React.ElementType}\n                  boxSize={6}\n                  color=\"brand.400\"\n                  mr={3}\n                />\n                <Box>\n                  <Text\n                    fontSize=\"xs\"\n                    color=\"accent.500\"\n                    textTransform=\"uppercase\"\n                  >\n                    Location\n                  </Text>\n                  {loading ? (\n                    <Text fontSize=\"sm\">Loading addressâ€¦</Text>\n                  ) : (\n                    <Text fontSize=\"sm\">\n                      {dogLocation\n                        ? `${dogLocation.city}, ${dogLocation.county}, ${dogLocation.state} ${dogLocation.zip_code}`\n                        : matchDog.zip_code}\n                    </Text>\n                  )}\n                </Box>\n              </Flex>\n            </VStack>\n          </Flex>\n        </Flex>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default MatchResultModal;\n"],"names":["useDogLocations","zipCodes","locationsMap","setLocationsMap","useState","loading","setLoading","zipKey","useMemo","filter","Boolean","join","useEffect","codes","split","length","canceled","list","fetchLocationsByZip","map","forEach","loc","zip_code","prev","prevKeys","Object","keys","newKeys","every","k","_prev$k","_map$k","_unused","useDogLocation","zipCode","zipArray","location","undefined","_ref","isOpen","onClose","matchDog","modalSize","useBreakpointValue","base","md","xl","zip","dogLocation","_jsxs","Modal","isCentered","size","children","_jsx","ModalOverlay","bg","backdropFilter","ModalContent","borderRadius","overflow","position","maxW","ModalCloseButton","top","right","color","Flex","direction","height","Box","flex","Image","src","img","alt","name","objectFit","width","maxH","justify","p","Heading","as","mb","fontSize","bgGradient","bgClip","letterSpacing","textAlign","VStack","spacing","align","divider","StackDivider","borderColor","mt","Icon","MdPets","boxSize","mr","Text","textTransform","breed","MdCake","age","MdLocationOn","concat","city","county","state"],"sourceRoot":""}